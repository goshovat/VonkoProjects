package geometry.planeShapes;

import geometry.Shape;
import geometry.Vertex;
import geometry.Interfaces.AreaMeasurable;
import geometry.Interfaces.PerimeterMeasurable;

public class Triangle extends Shape
implements AreaMeasurable, PerimeterMeasurable{
	
	public Triangle
	(double col1, double row1, double col2, double row2, double col3, double row3) {
		Vertex vertex1 = new PlaneVertex(col1, row1);
		Vertex vertex2 = new PlaneVertex(col2, row2);
		Vertex vertex3 = new PlaneVertex(col3, row3);
		
		super.vertices.add(vertex1);
	}

	public double getSide1() {
		Vertex vertex1 = super.vertices.get(0);
		Vertex vertex2 = super.vertices.get(1);
		Vertex vertex3 = super.vertices.get(2);
		
		return Math.sqrt((vertex1.getCol() - vertex2.getCol()) * (vertex1.getCol() - vertex2.getCol()) +
				(vertex1.getRow() - vertex2.getRow()) * (vertex1.getRow() - vertex2.getRow()));
	}
	
	public double getSide2() {
		Vertex vertex1 = super.vertices.get(0);
		Vertex vertex2 = super.vertices.get(1);
		Vertex vertex3 = super.vertices.get(2);
		
		return Math.sqrt((vertex1.getCol() - vertex3.getCol()) * (vertex1.getCol() - vertex3.getCol()) +
				(vertex1.getRow() - vertex3.getRow()) * (vertex1.getRow() - vertex3.getRow()));
	}
	
	public double getSide3() {
		Vertex vertex1 = super.vertices.get(0);
		Vertex vertex2 = super.vertices.get(1);
		Vertex vertex3 = super.vertices.get(2);
		
		return Math.sqrt((vertex2.getCol() - vertex3.getCol()) * (vertex2.getCol() - vertex3.getCol()) +
				(vertex2.getRow() - vertex3.getRow()) * (vertex2.getRow() - vertex3.getRow()));
	}
	
	@Override
	public double getPerimeter() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return 0;
	}
}
